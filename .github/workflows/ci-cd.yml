name: CI/CD Pipeline - Flask (Python)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: pytest tests/unit --maxfail=1 --disable-warnings -q

      - name: Lint (PEP8)
        run: flake8 . --max-line-length=120

  docker-build-and-test:
    needs: test-and-lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ci-cd-flask:${{ github.sha }} .

      - name: Run container for regression tests
        run: |
          docker run -d --name cicd_test -p 5000:5000 ci-cd-flask:${{ github.sha }}
          sleep 3
          pytest tests/regression -q
          docker stop cicd_test && docker rm cicd_test

  sonar:
    needs: docker-build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install sonar-scanner
        run: pip install sonar-scanner

      - name: Run sonar scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner -Dsonar.projectKey=ci-cd-flask -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: sonar
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

      - name: Push Docker image
        run: |
          docker build -t $DOCKER_USER/ci-cd-flask:latest .
          docker push $DOCKER_USER/ci-cd-flask:latest
